#!/bin/bash

if ! type grc >/dev/null; then
  echo 'blesh check: grc not found. grc can be found in github.com:akinomyoga/mshex.git/' >&2
  exit
fi

esc='(\[[ -?]*[@-~])*'
rex_grep_head="^$esc[[:graph:]]+$esc:$esc[[:digit:]]*$esc:$esc"

function check-builtin {
  echo "--- $FUNCNAME ---"
  local command="$1" esc='(\[[ -?]*[@-~])*'
  grc --color --exclude=./test "(^|[^-./\${}=])\b$command"'\b([[:space:]|&;<>()`"'\'']|$)' |
    grep -Ev "^$esc([^[:space:]]$esc)+[[:space:]]*#|(\b|$esc)builtin$esc([[:space:]]$esc)+$command(\b|$esc)" |
    grep -Ev "$command(\b|$esc)="
}

function check-a.txt {
  echo "--- $FUNCNAME ---"
  grc --color --exclude=./test 'a\.txt|/dev/pts/[0-9]*' |
    grep -Ev "$rex_grep_head#|[[:space:]]#"
}

function check-bash300bug {
  echo "--- $FUNCNAME ---"
  # bash-3.0 では local arr=(1 2 3) とすると
  # local arr='(1 2 3)' と解釈されてしまう。
  grc 'local [a-zA-Z_]+=\(' --exclude=test

  # bash-3.0 では local -a arr=("$hello") とすると
  # クォートしているにも拘らず $hello の中身が単語分割されてしまう。
  grc 'local -a [[:alnum:]_]+=\([^)]*[\"'\''`]' --exclude=test
  echo
}

function check-bash301bug-array-element-length {
  echo "--- $FUNCNAME ---"
  # bash-3.1 で ${#arr[index]} を用いると、
  # 日本語の文字数が変になる。
  grc '\$\{#[[:alnum:]]+\[[^@*]' --exclude=test | grep -Ev '^([^#]*[[:space:]])?#'
  echo
}

function check-assign {
  echo "--- $FUNCNAME ---"
  local command="$1"
  grc --color --exclude=./test --exclude=./memo '\$\([^()]' |
    grep -Ev "$rex_grep_head#|[[:space:]]#"
}

function check-memo-numbering {
  echo "--- $FUNCNAME ---"

  grep -ao '\[#D....\]' memo.txt | awk '
    function report_error(message) {
      printf("memo-numbering: \x1b[1;31m%s\x1b[m\n", message) > "/dev/stderr";
    }
    !/\[#D[0-9]{4}\]/ {
      report_error("invalid  number \"" $0 "\".");
      next;
    }
    {
      num = $0;
      gsub(/^\[#D0+|\]$/, "", num);
      if (prev != "" && num != prev - 1) {
        if (prev < num) {
          report_error("reverse ordering " num " has come after " prev ".");
        } else if (prev == num) {
          report_error("duplicate number " num ".");
        } else {
          for (i = prev - 1; i > num; i--) {
            report_error("memo-numbering: missing number " i ".");
          }
        }
      }
      prev = num;
    }
    END {
      if (prev != 1) {
        for (i = prev - 1; i >= 1; i--)
          report_error("memo-numbering: missing number " i ".");
      }
    }
  '
  sed -n '0,/^[[:space:]]\{1,\}Done/d;/  \* .*\[#D....\]$/d;/^  \* /p' memo.txt
}

# 誤って ((${#arr[@]})) を ((${arr[@]})) などと書いてしまうミス。
function check-array-count-in-arithmetic-expression {
  echo "--- $FUNCNAME ---"
  grc '\(\([^[:space:]]*\$\{[[:alnum:]_]+\[[@*]\]\}'
}

# builtin return break continue : eval echo unset は unset しているので大丈夫のはず

#check-builtin 'history'
#check-builtin 'echo'
#check-builtin '(bind|compopt|type|printf|read)'
check-builtin 'read'
#check-assign

check-a.txt
check-bash300bug
check-bash301bug-array-element-length
check-array-count-in-arithmetic-expression

check-memo-numbering
